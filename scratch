

EnvironmentObject             
    -- virtual bool is_wall() const   
    -- bool operator==        
                              |
                              | Agent
                                -- virtual ActionPtr execute(Percept&)
                                -- virtual bool set_program(ProgramPtr)
                                -- virtual bool is_alive()
                                -- virtual void set_alive(bool)
                                                        |
                                                        |
                                                        |
                                                        | Mock Agent
                                                                -- ActionPtr execute(Percept&) override
                                                                -- bool set_program(ProgramPtr) override
                                                                -- bool is_wall() const override
                                                                -- bool operator== 
                                                                -- size_t hash_it() 
                                                                -- bool is_alive() override
                                                                -- void set_alive(bool) override

AgentProgram
    -- ActionPtr execute(const Percept& p)
                                            |
                                            |TableDrivenAgentProgram
                                                -- char* ACTION = "action"
                                                -- std::vector<Percept> percepts
                                                -- std::vector<std::vector<Percept>> row_headers
                                                -- std::vector<std::string> col_headers
                                                -- Table<std::vector<Percept>, std::string, Action*>

                                                -- Action* lookup_action();
                                                -- TableDrivenAgentProgram(std::multimap<std::vector<Percept>, Action*>
                                                -- void set_table(std::multimap<std::vector<Percept>, Action*>


Before:

class A {
public:
virtual ~A() = default;

virtual void foo() = 0;

};

class B : public A {
public:
void foo() override {}
};

class C : public A {
public:
void foo() override {}
};

// takes concrete implementations of A (B or C in this case)
void clientFunc(std::unique_ptr<A> a) {
a->foo();
...
}
After:

class B {
public:
void foo() {}
};

class C {
public:
void foo() {}
};

// takes any type as long as it implements foo()
template <typename T>
void clientFunc(T a) {
a.foo();
...
}                                               -- Action* execute(const Percept& p)
